{"ast":null,"code":"var _jsxFileName = \"/Users/user/tenzies_game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Confetti from \"react-confetti\";\nimport Die from \"./components/Die\";\nimport { nanoid } from \"nanoid\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [dice, setDice] = useState(allNewDice());\n  const [tenzies, setTenzies] = useState(false);\n  useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld); // Check if all dice are held\n    const allEqual = dice.every(die => die.value === dice[0].value); // Check if all dice have the same value\n    if (allHeld && allEqual) {\n      setTenzies(true);\n      console.log(\"You win!\");\n      /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this);\n      // Do something to handle the win condition (e.g. display a message or trigger an animation)\n    }\n  }, [dice]);\n  // helper function to avoid code repetiton\n  function generateNewDie() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    };\n  }\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie());\n    }\n    return newDice;\n  }\n\n  // Clicking the button should generate a new array of numbers\n  // and set the `dice` state to that new array (thus re-rendering\n  // the array to the page)\n  function rollDice() {\n    setDice(oldDice => oldDice.map(die => {\n      return die.isHeld ? die : generateNewDie();\n    }));\n  }\n\n  // Flip the `isHeld` property on the object in the array\n  // that was clicked, based on the `id` prop passed into the function\n  function holdDice(id) {\n    setDice(prevDice => prevDice.map(die => {\n      if (die.id === id) {\n        return {\n          ...die,\n          isHeld: !die.isHeld //flip the propert\n        };\n      } else {\n        return die;\n      }\n    }));\n  }\n  // Map over the state numbers array to generate the array\n  // of Die elements and render those in the App component\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    holdDice: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Tenzies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instructions\",\n        children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: diceElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rollDice,\n          children: \"Roll\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mBhM4pmDk1UgsaV8K35tBPcmDjA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Confetti","Die","nanoid","jsxDEV","_jsxDEV","App","_s","dice","setDice","allNewDice","tenzies","setTenzies","allHeld","every","die","isHeld","allEqual","value","console","log","fileName","_jsxFileName","lineNumber","columnNumber","generateNewDie","Math","ceil","random","id","newDice","i","push","rollDice","oldDice","map","holdDice","prevDice","diceElements","className","children","onClick","_c","$RefreshReg$"],"sources":["/Users/user/tenzies_game/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport Confetti from \"react-confetti\"\nimport Die from \"./components/Die\"\nimport { nanoid } from \"nanoid\";\nimport './App.css';\n\nfunction App() {\n\n  const [dice, setDice] = useState(allNewDice());\n  const [tenzies, setTenzies] = useState(false)\n\n  useEffect(() => {\n    const allHeld = dice.every((die) => die.isHeld); // Check if all dice are held\n    const allEqual = dice.every((die) => die.value === dice[0].value); // Check if all dice have the same value\n    if (allHeld && allEqual) {\n      setTenzies(true)\n      console.log(\"You win!\");\n      <Confetti />\n      // Do something to handle the win condition (e.g. display a message or trigger an animation)\n    }\n  }, [dice]);\n  // helper function to avoid code repetiton\n  function generateNewDie() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    }\n  }\n\n  function allNewDice() {\n    const newDice = []\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie())\n    }\n    return newDice\n  }\n\n  // Clicking the button should generate a new array of numbers\n  // and set the `dice` state to that new array (thus re-rendering\n  // the array to the page)\n  function rollDice() {\n    setDice(oldDice => oldDice.map(die => {\n      return die.isHeld ?\n        die :\n        generateNewDie()\n    }))\n  }\n\n  // Flip the `isHeld` property on the object in the array\n  // that was clicked, based on the `id` prop passed into the function\n  function holdDice(id) {\n    setDice(prevDice => prevDice.map(die => {\n      if (die.id === id) {\n        return {\n          ...die, isHeld: !die.isHeld //flip the propert\n        };\n      } else {\n        return die;\n      }\n    }\n\n    ))\n  }\n  // Map over the state numbers array to generate the array\n  // of Die elements and render those in the App component\n  const diceElements = dice.map(die =>\n    <Die key={die.id} value={die.value} isHeld={die.isHeld} holdDice={() => holdDice(die.id)} />\n  )\n  return (\n    <div className=\"border\">\n      <main>\n        <h1 className=\"title\">Tenzies</h1>\n        <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n        <div className=\"dice-container\">\n          {diceElements}\n        </div>\n        <div className=\"btn\">\n          <button onClick={rollDice}>Roll</button>\n        </div>\n      </main>\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}